version: '3.8'

services:
  platform-api:
    build:
      context: .
      target: dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      JWT_SECRET: dev-secret-key-change-in-production
      CORS_ORIGINS: "http://localhost:3000,http://localhost:7007"
      # Kubernetes config (will use local kubeconfig)
      KUBE_CONTEXT: ""
      # Redis (optional for development)
      REDIS_URL: redis://redis:6379
      # Database (optional for development)
      DB_HOST: postgres
      DB_NAME: platform
      DB_USER: platform
      DB_PASSWORD: platform123
      # Argo Workflows (adjust URL as needed)
      ARGO_WORKFLOWS_URL: http://localhost:2746
      # Monitoring (optional)
      PROMETHEUS_URL: http://localhost:9090
      GRAFANA_URL: http://localhost:3001
      # Logging
      LOG_LEVEL: debug
      LOG_FORMAT: simple
    volumes:
      - .:/app
      - /app/node_modules
      - ~/.kube:/home/node/.kube:ro  # Mount local kubeconfig
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: platform
      POSTGRES_USER: platform
      POSTGRES_PASSWORD: platform123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platform -d platform"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: platform-network