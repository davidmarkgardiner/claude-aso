---
# Test pod to verify mTLS enforcement
apiVersion: v1
kind: Pod
metadata:
  name: mtls-test-pod
  namespace: istio-testing
  labels:
    app: mtls-tester
    sidecar.istio.io/inject: "false" # No sidecar to test if non-mTLS is blocked
spec:
  containers:
    - name: curl
      image: curlimages/curl:latest
      command: ["/bin/sh"]
      args: ["-c", "while true; do sleep 3600; done"]
---
# Test service without sidecar (should be blocked)
apiVersion: v1
kind: Service
metadata:
  name: insecure-test-service
  namespace: istio-testing
  labels:
    app: insecure-test
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: insecure-test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: insecure-test-deployment
  namespace: istio-testing
  labels:
    app: insecure-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: insecure-test
  template:
    metadata:
      labels:
        app: insecure-test
      annotations:
        sidecar.istio.io/inject: "false" # This should trigger audit/block
    spec:
      containers:
        - name: httpbin
          image: kennethreitz/httpbin
          ports:
            - containerPort: 80
---
# Script to verify mTLS status across all namespaces
apiVersion: v1
kind: ConfigMap
metadata:
  name: mtls-verification-script
  namespace: istio-testing
data:
  verify-mtls.sh: |
    #!/bin/bash

    echo "=== mTLS Verification Report ==="
    echo "Date: $(date)"
    echo ""

    # Check mesh-wide PeerAuthentication
    echo "1. Checking mesh-wide PeerAuthentication..."
    kubectl get peerauthentication -n istio-system default -o yaml | grep -A2 "mtls:" || echo "WARNING: No mesh-wide policy found!"
    echo ""

    # Check namespace-specific PeerAuthentications
    echo "2. Checking namespace-specific PeerAuthentications..."
    for ns in $(kubectl get ns -o name | cut -d/ -f2 | grep -E "tenant-|shared-services|istio-testing|external-services|aks-istio-system"); do
      echo "  Namespace: $ns"
      kubectl get peerauthentication -n $ns -o yaml 2>/dev/null | grep -A1 "mode:" | grep -v "^--" || echo "    No PeerAuthentication found"
    done
    echo ""

    # Check DestinationRules for TLS configuration
    echo "3. Checking DestinationRules TLS settings..."
    kubectl get destinationrule -A -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,HOST:.spec.host,TLS_MODE:.spec.trafficPolicy.tls.mode 2>/dev/null | grep -v "<none>"
    echo ""

    # Check for services without sidecars
    echo "4. Checking for pods without Istio sidecars..."
    for ns in $(kubectl get ns -o name | cut -d/ -f2 | grep -E "tenant-|shared-services|istio-testing"); do
      echo "  Namespace: $ns"
      kubectl get pods -n $ns -o json | jq -r '.items[] | select(.spec.containers | length == 1) | .metadata.name' | while read pod; do
        echo "    WARNING: Pod without sidecar: $pod"
      done
    done
    echo ""

    # Test mTLS between services
    echo "5. Testing mTLS connectivity..."

    # Get a pod with sidecar in tenant-a
    TEST_POD=$(kubectl get pods -n tenant-a -l version=v1 -o name | head -1 | cut -d/ -f2)
    if [ ! -z "$TEST_POD" ]; then
      echo "  Testing from tenant-a/$TEST_POD..."
      
      # Test connection to shared-services
      echo -n "  → shared-services/prometheus: "
      kubectl exec -n tenant-a $TEST_POD -c podinfo -- curl -s -o /dev/null -w "%{http_code}" http://prometheus.shared-services:9090/-/healthy 2>/dev/null || echo "FAILED"
      
      # Test connection to tenant-b (should work if allowed in Sidecar)
      echo -n "  → tenant-b/podinfo: "
      kubectl exec -n tenant-a $TEST_POD -c podinfo -- curl -s -o /dev/null -w "%{http_code}" http://podinfo.tenant-b:9898/healthz 2>/dev/null || echo "BLOCKED (expected)"
    fi
    echo ""

    # Check for PERMISSIVE mode violations
    echo "6. Checking for PERMISSIVE mode violations..."
    kubectl get peerauthentication -A -o json | jq -r '.items[] | select(.spec.mtls.mode == "PERMISSIVE") | "\(.metadata.namespace)/\(.metadata.name)"' | while read pa; do
      echo "  VIOLATION: PeerAuthentication $pa is in PERMISSIVE mode!"
    done

    # Check Kyverno policy violations
    echo ""
    echo "7. Checking Kyverno policy violations..."
    kubectl get events -A --field-selector reason=PolicyViolation | grep -i mtls | tail -5

    echo ""
    echo "=== Verification Complete ==="
---
# Job to run verification
apiVersion: batch/v1
kind: Job
metadata:
  name: mtls-verification-job
  namespace: istio-testing
spec:
  template:
    metadata:
      labels:
        app: mtls-verifier
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: istio-testing-sa
      containers:
        - name: verifier
          image: bitnami/kubectl:latest
          command: ["/bin/bash"]
          args: ["/scripts/verify-mtls.sh"]
          volumeMounts:
            - name: script
              mountPath: /scripts
      volumes:
        - name: script
          configMap:
            name: mtls-verification-script
            defaultMode: 0755
      restartPolicy: Never
---
# ServiceAccount for verification job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-testing-sa
  namespace: istio-testing
---
# ClusterRole for verification
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mtls-verifier
rules:
  - apiGroups: ["security.istio.io"]
    resources: ["peerauthentications", "authorizationpolicies"]
    verbs: ["get", "list"]
  - apiGroups: ["networking.istio.io"]
    resources: ["destinationrules", "virtualservices", "sidecars"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods", "services", "namespaces", "events"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mtls-verifier-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mtls-verifier
subjects:
  - kind: ServiceAccount
    name: istio-testing-sa
    namespace: istio-testing
