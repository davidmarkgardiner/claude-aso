# 1. Gateway - HTTPS Ingress with TLS
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: main-gateway
  namespace: aks-istio-system
  labels:
    istio-component: gateway
    deployment-agent: istio-engineer
    test-scenario: ingress-routing
spec:
  selector:
    istio: aks-istio-ingressgateway
  servers:
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: SIMPLE
        credentialName: davidmarkgardiner-co-uk-tls
      hosts:
        - "*.davidmarkgardiner.co.uk"
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*.davidmarkgardiner.co.uk"
      redirect:
        httpsRedirect: true
---
# Certificate for domain
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: davidmarkgardiner-co-uk-cert
  namespace: aks-istio-system
  labels:
    deployment-agent: istio-engineer
    component: cert-management
spec:
  secretName: davidmarkgardiner-co-uk-tls # pragma: allowlist secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - "*.davidmarkgardiner.co.uk"
    - "davidmarkgardiner.co.uk"
---
# 2. VirtualService - Multi-tenant routing for Tenant A
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: tenant-a-routing
  namespace: tenant-a
  labels:
    istio-component: virtualservice
    deployment-agent: istio-engineer
    test-scenario: traffic-routing
    tenant: tenant-a
spec:
  hosts:
    - "podinfo.tenant-a.davidmarkgardiner.co.uk"
  gateways:
    - aks-istio-system/main-gateway
  http:
    # Canary deployment: 90% v1, 10% v2
    - match:
        - headers:
            canary:
              exact: "true"
      route:
        - destination:
            host: podinfo
            subset: v2
    - route:
        - destination:
            host: podinfo
            subset: v1
          weight: 90
        - destination:
            host: podinfo
            subset: v2
          weight: 10
---
# 3. VirtualService - Multi-tenant routing for Tenant B
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: tenant-b-routing
  namespace: tenant-b
  labels:
    istio-component: virtualservice
    deployment-agent: istio-engineer
    test-scenario: traffic-routing
    tenant: tenant-b
spec:
  hosts:
    - "podinfo.tenant-b.davidmarkgardiner.co.uk"
  gateways:
    - aks-istio-system/main-gateway
  http:
    - route:
        - destination:
            host: podinfo
            subset: v1
---
# 4. DestinationRule - Traffic policies for Tenant A
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: podinfo-destination
  namespace: tenant-a
  labels:
    istio-component: destinationrule
    deployment-agent: istio-engineer
    test-scenario: traffic-policies
    tenant: tenant-a
spec:
  host: podinfo
  trafficPolicy:
    loadBalancer:
      simple: LEAST_REQUEST
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
    outlierDetection:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
---
# 5. DestinationRule - Traffic policies for Tenant B
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: podinfo-destination
  namespace: tenant-b
  labels:
    istio-component: destinationrule
    deployment-agent: istio-engineer
    test-scenario: traffic-policies
    tenant: tenant-b
spec:
  host: podinfo
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
  subsets:
    - name: v1
      labels:
        version: v1
---
# 6. ServiceEntry - External service access
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: external-api-demo
  namespace: tenant-a
  labels:
    istio-component: serviceentry
    deployment-agent: istio-engineer
    test-scenario: external-services
spec:
  hosts:
    - httpbin.org
    - jsonplaceholder.typicode.com
  ports:
    - number: 80
      name: http
      protocol: HTTP
    - number: 443
      name: https
      protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---
# 7. ServiceEntry for Tenant B
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: external-api-demo
  namespace: tenant-b
  labels:
    istio-component: serviceentry
    deployment-agent: istio-engineer
    test-scenario: external-services
spec:
  hosts:
    - httpbin.org
  ports:
    - number: 80
      name: http
      protocol: HTTP
    - number: 443
      name: https
      protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---
# 8. Sidecar - Namespace isolation for Tenant A
apiVersion: networking.istio.io/v1
kind: Sidecar
metadata:
  name: default
  namespace: tenant-a
  labels:
    istio-component: sidecar
    deployment-agent: istio-engineer
    test-scenario: namespace-isolation
    tenant: tenant-a
spec:
  egress:
    - hosts:
        - "./*" # Same namespace
        - "aks-istio-system/*" # AKS Istio control plane
        - "shared-services/*" # Common services
---
# 9. Sidecar - Namespace isolation for Tenant B
apiVersion: networking.istio.io/v1
kind: Sidecar
metadata:
  name: default
  namespace: tenant-b
  labels:
    istio-component: sidecar
    deployment-agent: istio-engineer
    test-scenario: namespace-isolation
    tenant: tenant-b
spec:
  egress:
    - hosts:
        - "./*" # Same namespace
        - "aks-istio-system/*" # AKS Istio control plane
        - "shared-services/*" # Common services
---
# 10. AuthorizationPolicy - Strict isolation for Tenant A
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: tenant-a-security
  namespace: tenant-a
  labels:
    istio-component: authorizationpolicy
    deployment-agent: istio-engineer
    test-scenario: multi-tenant-security
    tenant: tenant-a
spec:
  action: ALLOW
  rules:
    # Allow same-namespace traffic
    - from:
        - source:
            namespaces: ["tenant-a"]
    # Allow shared services
    - from:
        - source:
            namespaces: ["shared-services"]
      to:
        - operation:
            methods: ["GET"]
            paths: ["/health", "/metrics"]
    # Allow ingress gateway
    - from:
        - source:
            namespaces: ["aks-istio-system"]
---
# 11. AuthorizationPolicy - Strict isolation for Tenant B
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: tenant-b-security
  namespace: tenant-b
  labels:
    istio-component: authorizationpolicy
    deployment-agent: istio-engineer
    test-scenario: multi-tenant-security
    tenant: tenant-b
spec:
  action: ALLOW
  rules:
    # Allow same-namespace traffic
    - from:
        - source:
            namespaces: ["tenant-b"]
    # Allow shared services
    - from:
        - source:
            namespaces: ["shared-services"]
      to:
        - operation:
            methods: ["GET"]
            paths: ["/health", "/metrics"]
    # Allow ingress gateway
    - from:
        - source:
            namespaces: ["aks-istio-system"]
