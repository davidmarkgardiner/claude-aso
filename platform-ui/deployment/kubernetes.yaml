# Platform UI Kubernetes Deployment with Secure Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-ui
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-ui
    app.kubernetes.io/component: frontend
    app.kubernetes.io/version: "1.0.0"
    platform.io/managed-by: kubernetes
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: platform-ui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: platform-ui
        app.kubernetes.io/component: frontend
        app.kubernetes.io/version: "1.0.0"
      annotations:
        platform.io/config-checksum: '{{ include (print $.Template.BasePath "/platform-ui-config.yaml") . | sha256sum }}'
    spec:
      serviceAccountName: platform-ui
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: platform-ui
          image: platform-ui:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "8080"
          # Environment variables from External Secrets
          envFrom:
            - secretRef:
                name: platform-ui-config
          volumeMounts:
            # Mount runtime configuration
            - name: config-volume
              mountPath: /usr/share/nginx/html/config
              readOnly: true
            # Mount temporary directories (since root filesystem is read-only)
            - name: tmp-volume
              mountPath: /tmp
            - name: var-cache-nginx
              mountPath: /var/cache/nginx
            - name: var-run
              mountPath: /var/run
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
      volumes:
        # Runtime configuration from External Secrets
        - name: config-volume
          secret:
            secretName: platform-ui-config
            items:
              - key: config.json
                path: config.json
            defaultMode: 0444
        # Temporary volumes for read-only filesystem
        - name: tmp-volume
          emptyDir:
            sizeLimit: 100Mi
        - name: var-cache-nginx
          emptyDir:
            sizeLimit: 50Mi
        - name: var-run
          emptyDir:
            sizeLimit: 10Mi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Service Account for Platform UI
apiVersion: v1
kind: ServiceAccount
metadata:
  name: platform-ui
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-ui
    app.kubernetes.io/component: frontend
automountServiceAccountToken: false

---
# Service for Platform UI
apiVersion: v1
kind: Service
metadata:
  name: platform-ui
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-ui
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: platform-ui

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: platform-ui
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-ui
    app.kubernetes.io/component: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: platform-ui
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: platform-ui
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-ui
    app.kubernetes.io/component: frontend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: platform-ui

---
# Network Policy for Platform UI
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: platform-ui
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-ui
    app.kubernetes.io/component: frontend
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: platform-ui
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow ingress from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
      ports:
        - protocol: TCP
          port: 8080
    # Allow ingress from monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # Allow egress to platform API
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: platform-api
      ports:
        - protocol: TCP
          port: 3000
    # Allow egress to DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow egress to Azure services (for OAuth)
    - to: []
      ports:
        - protocol: TCP
          port: 443
