# Production ExternalSecret for Platform API - Complete Configuration
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: platform-api-secrets
  namespace: platform-system
  labels:
    app.kubernetes.io/name: platform-api
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.1.0"
    platform.io/component: "platform-api"
    platform.io/managed-by: "external-secrets"
    platform.io/secret-type: "application"
    platform.io/tier: "production"
  annotations:
    platform.io/description: "Production secrets for Platform API backend"
    external-secrets.io/backend: "azure-keyvault"
    external-secrets.io/last-updated: "2025-01-17T10:00:00Z"
spec:
  refreshInterval: 30m # More frequent refresh for production

  secretStoreRef:
    name: azure-keyvault
    kind: ClusterSecretStore

  target:
    name: platform-api-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/name: platform-api
          app.kubernetes.io/component: backend
          platform.io/component: "platform-api"
          platform.io/secret-type: "application"
          platform.io/managed-by: "external-secrets"
        annotations:
          platform.io/rotation-schedule: "monthly"
          platform.io/backup-required: "true"
      data:
        # Application Configuration
        NODE_ENV: "production"
        PORT: "3000"
        LOG_LEVEL: "info"
        LOG_FORMAT: "json"

        # JWT Configuration - Production Ready
        JWT_SECRET: "{{ .jwtSecret | toString }}"
        JWT_EXPIRES_IN: "24h"
        JWT_ISSUER: "platform-api-production"
        JWT_AUDIENCE: "platform-users"
        JWT_ALGORITHM: "HS256"

        # Azure AD Integration
        AZURE_CLIENT_ID: "{{ .azureClientId | toString }}"
        AZURE_CLIENT_SECRET: "{{ .azureClientSecret | toString }}"
        AZURE_TENANT_ID: "{{ .azureTenantId | toString }}"
        AZURE_AUTHORITY: "https://login.microsoftonline.com/{{ .azureTenantId | toString }}"
        AZURE_SCOPE: "https://graph.microsoft.com/.default"

        # Database Configuration - Production
        DB_HOST: "{{ .dbHost | toString }}"
        DB_PORT: "{{ .dbPort | toString }}"
        DB_NAME: "{{ .dbName | toString }}"
        DB_USER: "{{ .dbUser | toString }}"
        DB_PASSWORD: "{{ .dbPassword | toString }}"
        DB_SSL: "require"
        DB_MAX_CONNECTIONS: "20"
        DB_CONNECTION_TIMEOUT: "30000"
        DB_IDLE_TIMEOUT: "600000"
        DATABASE_URL: "postgresql://{{ .dbUser | toString }}:{{ .dbPassword | toString }}@{{ .dbHost | toString }}:{{ .dbPort | toString }}/{{ .dbName | toString }}?sslmode=require"

        # Redis Configuration
        REDIS_HOST: '{{ .redisHost | toString | default "redis-service" }}'
        REDIS_PORT: '{{ .redisPort | toString | default "6379" }}'
        REDIS_PASSWORD: "{{ .redisPassword | toString }}"
        REDIS_DB: "0"
        REDIS_KEY_PREFIX: "platform:"
        REDIS_CONNECT_TIMEOUT: "10000"
        REDIS_COMMAND_TIMEOUT: "5000"
        REDIS_URL: 'redis://:{{ .redisPassword | toString }}@{{ .redisHost | toString | default "redis-service" }}:{{ .redisPort | toString | default "6379" }}/0'

        # Security Keys
        ENCRYPTION_KEY: "{{ .encryptionKey | toString }}"
        API_KEY: "{{ .apiKey | toString }}"
        WEBHOOK_SECRET: "{{ .webhookSecret | toString }}"

        # Platform Configuration
        PLATFORM_DEFAULT_TIER: "small"
        PLATFORM_MAX_NAMESPACES_PER_TEAM: "10"
        PLATFORM_COST_TRACKING: "true"
        PLATFORM_AUDIT_RETENTION_DAYS: "90"

        # Rate Limiting
        RATE_LIMIT_WINDOW_MS: "900000" # 15 minutes
        RATE_LIMIT_MAX_REQUESTS: "1000"
        RATE_LIMIT_SKIP_SUCCESS: "false"

        # Monitoring Integration
        PROMETHEUS_ENDPOINT: "/metrics"
        HEALTH_CHECK_ENDPOINT: "/health"
        READINESS_CHECK_ENDPOINT: "/ready"

  data:
    # JWT Configuration
    - secretKey: jwtSecret
      remoteRef:
        key: platform-jwt-secret

    # Azure AD Configuration
    - secretKey: azureClientId
      remoteRef:
        key: platform-azure-client-id

    - secretKey: azureClientSecret
      remoteRef:
        key: platform-azure-client-secret

    - secretKey: azureTenantId
      remoteRef:
        key: platform-azure-tenant-id

    # Database Configuration
    - secretKey: dbHost
      remoteRef:
        key: platform-db-host

    - secretKey: dbPort
      remoteRef:
        key: platform-db-port

    - secretKey: dbName
      remoteRef:
        key: platform-db-name

    - secretKey: dbUser
      remoteRef:
        key: platform-db-user

    - secretKey: dbPassword
      remoteRef:
        key: platform-db-password

    # Redis Configuration
    - secretKey: redisHost
      remoteRef:
        key: platform-redis-host
        property: value
      # Optional field with fallback
      optional: true

    - secretKey: redisPort
      remoteRef:
        key: platform-redis-port
        property: value
      optional: true

    - secretKey: redisPassword
      remoteRef:
        key: platform-redis-password

    # Additional Security Keys
    - secretKey: encryptionKey
      remoteRef:
        key: platform-encryption-key

    - secretKey: apiKey
      remoteRef:
        key: platform-api-key

    - secretKey: webhookSecret
      remoteRef:
        key: platform-webhook-secret

---
# Production ExternalSecret for cert-manager ACME account
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: acme-account-key
  namespace: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: acme-solver
    platform.io/component: "cert-manager"
    platform.io/managed-by: "external-secrets"
    platform.io/secret-type: "acme-account"
  annotations:
    platform.io/description: "ACME account private key for Let's Encrypt"
    cert-manager.io/issuer-name: "letsencrypt-prod"
spec:
  refreshInterval: 6h # Less frequent for certificate keys

  secretStoreRef:
    name: azure-keyvault
    kind: ClusterSecretStore

  target:
    name: acme-account-key
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/name: cert-manager
          platform.io/component: "cert-manager"
          platform.io/secret-type: "acme-account"
          platform.io/managed-by: "external-secrets"
        annotations:
          platform.io/rotation-schedule: "yearly"
          cert-manager.io/issuer-name: "letsencrypt-prod"
      data:
        tls.key: "{{ .accountKey | b64dec }}"
        # Additional metadata for cert-manager
        account-url: '{{ .accountUrl | default "https://acme-v02.api.letsencrypt.org/acme/acct/" }}'

  data:
    - secretKey: accountKey
      remoteRef:
        key: acme-account-private-key

    - secretKey: accountUrl
      remoteRef:
        key: acme-account-url
        property: value
      optional: true

---
# Production ExternalSecret for External DNS Azure credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: azure-dns-credentials
  namespace: external-dns
  labels:
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/component: dns-controller
    platform.io/component: "external-dns"
    platform.io/managed-by: "external-secrets"
    platform.io/secret-type: "azure-credentials"
  annotations:
    platform.io/description: "Azure DNS credentials for External DNS"
    external-dns.alpha.kubernetes.io/provider: "azure"
spec:
  refreshInterval: 30m # DNS credentials may rotate more frequently

  secretStoreRef:
    name: azure-keyvault
    kind: ClusterSecretStore

  target:
    name: azure-dns-credentials
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/name: external-dns
          platform.io/component: "external-dns"
          platform.io/secret-type: "azure-credentials"
          platform.io/managed-by: "external-secrets"
        annotations:
          platform.io/rotation-schedule: "quarterly"
      data:
        # Azure configuration file format
        azure.json: |
          {
            "tenantId": "{{ .tenantId | toString }}",
            "subscriptionId": "{{ .subscriptionId | toString }}",
            "resourceGroup": "{{ .resourceGroup | toString }}",
            "aadClientId": "{{ .clientId | toString }}",
            "aadClientSecret": "{{ .clientSecret | toString }}",
            "environment": "AzurePublicCloud",
            "useManagedIdentityExtension": false,
            "useWorkloadIdentityExtension": true
          }
        # Individual components for easier debugging
        tenant-id: "{{ .tenantId | toString }}"
        subscription-id: "{{ .subscriptionId | toString }}"
        resource-group: "{{ .resourceGroup | toString }}"
        client-id: "{{ .clientId | toString }}"
        client-secret: "{{ .clientSecret | toString }}"

  data:
    - secretKey: tenantId
      remoteRef:
        key: azure-tenant-id

    - secretKey: subscriptionId
      remoteRef:
        key: azure-subscription-id

    - secretKey: resourceGroup
      remoteRef:
        key: dns-resource-group

    - secretKey: clientId
      remoteRef:
        key: external-dns-client-id

    - secretKey: clientSecret
      remoteRef:
        key: external-dns-client-secret

---
# Production ExternalSecret for Istio Gateway TLS certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: istio-gateway-tls
  namespace: istio-system
  labels:
    app.kubernetes.io/name: istio-gateway
    app.kubernetes.io/component: tls
    platform.io/component: "istio-gateway"
    platform.io/managed-by: "external-secrets"
    platform.io/secret-type: "tls-certificate"
  annotations:
    platform.io/description: "TLS certificates for Istio Gateway"
    istio.io/gateway-name: "platform-gateway"
spec:
  refreshInterval: 12h # TLS certificates should be checked regularly

  secretStoreRef:
    name: azure-keyvault
    kind: ClusterSecretStore

  target:
    name: istio-gateway-tls
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: kubernetes.io/tls
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/name: istio-gateway
          platform.io/component: "istio-gateway"
          platform.io/secret-type: "tls-certificate"
          platform.io/managed-by: "external-secrets"
        annotations:
          platform.io/rotation-schedule: "monthly"
          cert-manager.io/issuer-name: "letsencrypt-prod"
      data:
        tls.crt: "{{ .tlsCert | b64dec }}"
        tls.key: "{{ .tlsKey | b64dec }}"
        ca.crt: '{{ .caCert | b64dec | default "" }}'

  data:
    - secretKey: tlsCert
      remoteRef:
        key: istio-gateway-tls-cert

    - secretKey: tlsKey
      remoteRef:
        key: istio-gateway-tls-key

    - secretKey: caCert
      remoteRef:
        key: istio-gateway-ca-cert
        property: value
      optional: true

---
# Production ExternalSecret for monitoring stack credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring-stack
    app.kubernetes.io/component: credentials
    platform.io/component: "monitoring"
    platform.io/managed-by: "external-secrets"
    platform.io/secret-type: "monitoring-credentials"
  annotations:
    platform.io/description: "Credentials for monitoring stack components"
spec:
  refreshInterval: 1h

  secretStoreRef:
    name: azure-keyvault
    kind: ClusterSecretStore

  target:
    name: monitoring-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/name: monitoring-stack
          platform.io/component: "monitoring"
          platform.io/secret-type: "monitoring-credentials"
          platform.io/managed-by: "external-secrets"
      data:
        # Grafana admin credentials
        grafana-admin-user: '{{ .grafanaAdminUser | default "admin" }}'
        grafana-admin-password: "{{ .grafanaAdminPassword | toString }}"

        # Prometheus basic auth (if enabled)
        prometheus-username: '{{ .prometheusUsername | default "prometheus" }}'
        prometheus-password: "{{ .prometheusPassword | toString }}"

        # Azure Monitor integration
        azure-monitor-tenant-id: "{{ .azureTenantId | toString }}"
        azure-monitor-client-id: "{{ .azureMonitorClientId | toString }}"
        azure-monitor-client-secret: "{{ .azureMonitorClientSecret | toString }}"
        azure-monitor-subscription-id: "{{ .azureSubscriptionId | toString }}"

  data:
    - secretKey: grafanaAdminPassword
      remoteRef:
        key: grafana-admin-password

    - secretKey: prometheusPassword
      remoteRef:
        key: prometheus-password
      optional: true

    - secretKey: azureTenantId
      remoteRef:
        key: azure-tenant-id

    - secretKey: azureMonitorClientId
      remoteRef:
        key: azure-monitor-client-id

    - secretKey: azureMonitorClientSecret
      remoteRef:
        key: azure-monitor-client-secret

    - secretKey: azureSubscriptionId
      remoteRef:
        key: azure-subscription-id
