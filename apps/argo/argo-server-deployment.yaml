apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-server
  namespace: argo
  labels:
    app.kubernetes.io/name: argo-workflows
    app.kubernetes.io/component: argo-server
    app.kubernetes.io/part-of: platform-api
    app.kubernetes.io/version: "v3.5.10"
    managed-by: flux
  annotations:
    deployment.kubernetes.io/revision: "1"
    platform.azure.com/cost-center: "infrastructure"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/component: argo-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-workflows
        app.kubernetes.io/component: argo-server
        app.kubernetes.io/part-of: platform-api
        azure.workload.identity/use: "true"
      annotations:
        # Security annotations
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
        container.apparmor.security.beta.kubernetes.io/argo-server: runtime/default
        # Monitoring annotations
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "2746"
    spec:
      serviceAccountName: argo-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      nodeSelector:
        kubernetes.io/os: linux
        agentpool: system
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argo-workflows
                    app.kubernetes.io/component: argo-server
                topologyKey: kubernetes.io/hostname
      containers:
        - name: argo-server
          image: quay.io/argoproj/argocli:v3.5.10
          imagePullPolicy: IfNotPresent
          command:
            - argo
          args:
            - server
            - --configmap=workflow-controller-configmap
            - --secure=true
            - --tls-config-customizer-name=argo-server-tls
            - --auth-mode=sso
            - --namespaced
            - --managed-namespace=argo
            - --log-level=info
            - --log-format=json
            - --x-frame-options=SAMEORIGIN
            - --hsts=true
            - --access-control-allow-origin=https://platform.azure.local
          ports:
            - name: web
              containerPort: 2746
              protocol: TCP
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: IN_CLUSTER
              value: "true"
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: BASE_HREF
              value: /argo/
            # Azure-specific environment variables
            - name: AZURE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: azure-workload-identity
                  key: client-id
            - name: AZURE_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: azure-workload-identity
                  key: tenant-id
            # SSO Configuration for Azure AD
            - name: SSO_ISSUER
              value: "https://sts.windows.net/$(AZURE_TENANT_ID)/"
            - name: SSO_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: argo-server-sso
                  key: client-id
            - name: SSO_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: argo-server-sso
                  key: client-secret
            - name: SSO_REDIRECT_URL
              value: "https://argo-workflows.azure.local/oauth2/callback"
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 500m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
          livenessProbe:
            httpGet:
              path: /
              port: 2746
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 2746
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 1
            failureThreshold: 3
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: tls-certs
              mountPath: /etc/tls
              readOnly: true
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: tls-certs
          secret:
            secretName: argo-server-tls
            defaultMode: 0600
      priorityClassName: system-cluster-critical
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
