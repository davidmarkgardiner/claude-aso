apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-api
  namespace: platform-system
  labels:
    app: platform-api
    platform.io/component: "platform-api"
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: platform-api
  template:
    metadata:
      labels:
        app: platform-api
        platform.io/component: "platform-api"
        version: v1
        azure.workload.identity/use: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: platform-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: platform-api
        image: davidgardiner/platform-api:latest  # Will be built and pushed to Docker Hub
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3001
          protocol: TCP
        env:
        # Azure Workload Identity
        - name: AZURE_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              name: platform-api-identity-cm
              key: clientId
        - name: AZURE_TENANT_ID
          valueFrom:
            configMapKeyRef:
              name: platform-api-identity-cm
              key: tenantId
        # Platform API Configuration (from ConfigMap)
        - name: PORT
          value: "3001"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: NODE_ENV
        - name: KUBE_CONTEXT
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: KUBE_CONTEXT
        - name: KUBE_NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: KUBE_NAMESPACE
        - name: JWT_ISSUER
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: JWT_ISSUER
        - name: JWT_AUDIENCE
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: JWT_AUDIENCE
        - name: JWT_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: JWT_EXPIRES_IN
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: CORS_ORIGINS
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: platform-api-config
              key: LOG_FORMAT
        # Secrets from Kubernetes secrets
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: platform-api-secrets
              key: jwt-secret
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: platform-api-secrets
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: platform-api-secrets
              key: redis-password
              optional: true
        # Database configuration
        - name: DB_HOST
          value: "postgresql.database.svc.cluster.local"  # TODO: Update with actual database
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "platform"
        - name: DB_USER
          value: "platform"
        # Redis configuration
        - name: REDIS_URL
          value: "redis://redis.database.svc.cluster.local:6379"  # TODO: Update with actual Redis
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30