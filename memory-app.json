{"type":"entity","name":"devopstoolkit-appclaim-platform","entityType":"cluster-fingerprint","observations":["DevOpsToolkit platform with App/AppClaim CRDs for application deployment","Supports auto-scaling, CI/CD, database integration, and ingress configuration","Contour ingress controller with ELB load balancer integration","Application parameters: image, tag, port, host, scaling, CI, database, repository"]}
{"type":"entity","name":"appclaim-configuration-patterns","entityType":"configuration-pattern","observations":["Host configuration: use {app}.{ingress-ip}.nip.io format for external access","Auto-scaling: specify min/max replicas with enabled: true","Required fields: id, image, tag for basic deployment","Optional features: CI/CD (requires repository), database integration","Labels: app, application-setup, managed-by for resource organization"]}
{"type":"entity","name":"ingress-networking-patterns","entityType":"networking-guide","observations":["Contour ingress controller creates AWS ELB load balancer","Resolve ELB hostname to IP address using nslookup for nip.io domains","Application becomes accessible at configured host after deployment","Monitor deployment: SYNCED=True indicates successful resource creation"]}
{"type":"entity","name":"devopstoolkit-platform-observation","entityType":"cluster-fingerprint","observations":["Platform: Azure AKS with DevOpsToolkit + Crossplane","Application pattern: AppClaim → App composite → Kubernetes resources via Crossplane","Ingress: Contour LoadBalancer at 4.156.241.86 with nip.io domains","Application status: my-app healthy, accessible via HTTP on configured domain","Resource organization: Uses app-registry ConfigMaps to track managed resources","Deployment pattern: Single replica with ClusterIP service + Ingress for external access"]}
{"type":"entity","name":"aks-cluster-baseline","entityType":"performance-baseline","observations":["Cluster: 2-node AKS cluster with moderate resource usage","Node usage: ~6-8% CPU, ~71-72% memory utilization","Pod performance: Most pods using 1-4m CPU, 8-164Mi memory","Crossplane overhead: Azure provider using 164Mi memory (highest consumer)","Application efficiency: my-app using minimal resources (1m CPU, 8Mi memory)","Atlas schema management: Dev database pods use ~31Mi memory each"]}
{"type":"entity","name":"devopstoolkit-deletion-workflow","entityType":"deletion-workflow","observations":["Successful YAML-based deletion of DevOpsToolkit AppClaim","AppClaim deletion cascades to App composite and all Kubernetes resources","Order: AppClaim → automatic cascade to Deployment, Service, Ingress","No manual cleanup of individual Kubernetes resources needed","Registry ConfigMaps require separate deletion","Application becomes immediately inaccessible after AppClaim deletion"]}