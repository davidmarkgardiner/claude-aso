{"type":"entity","name":"devopstoolkit-appclaim-platform","entityType":"cluster-fingerprint","observations":["DevOpsToolkit platform with App/AppClaim CRDs for application deployment","Supports auto-scaling, CI/CD, database integration, and ingress configuration","Contour ingress controller with ELB load balancer integration","Application parameters: image, tag, port, host, scaling, CI, database, repository"]}
{"type":"entity","name":"appclaim-configuration-patterns","entityType":"configuration-pattern","observations":["Host configuration: use {app}.{ingress-ip}.nip.io format for external access","Auto-scaling: specify min/max replicas with enabled: true","Required fields: id, image, tag for basic deployment","Optional features: CI/CD (requires repository), database integration","Labels: app, application-setup, managed-by for resource organization"]}
{"type":"entity","name":"ingress-networking-patterns","entityType":"networking-guide","observations":["Contour ingress controller creates AWS ELB load balancer","Resolve ELB hostname to IP address using nslookup for nip.io domains","Application becomes accessible at configured host after deployment","Monitor deployment: SYNCED=True indicates successful resource creation"]}
{"type":"entity","name":"devopstoolkit-platform-observation","entityType":"cluster-fingerprint","observations":["Platform: Azure AKS with DevOpsToolkit + Crossplane","Application pattern: AppClaim → App composite → Kubernetes resources via Crossplane","Ingress: Contour LoadBalancer at 4.156.241.86 with nip.io domains","Application status: my-app healthy, accessible via HTTP on configured domain","Resource organization: Uses app-registry ConfigMaps to track managed resources","Deployment pattern: Single replica with ClusterIP service + Ingress for external access"]}
{"type":"entity","name":"aks-cluster-baseline","entityType":"performance-baseline","observations":["Cluster: 2-node AKS cluster with moderate resource usage","Node usage: ~6-8% CPU, ~71-72% memory utilization","Pod performance: Most pods using 1-4m CPU, 8-164Mi memory","Crossplane overhead: Azure provider using 164Mi memory (highest consumer)","Application efficiency: my-app using minimal resources (1m CPU, 8Mi memory)","Atlas schema management: Dev database pods use ~31Mi memory each"]}
{"type":"entity","name":"devopstoolkit-deletion-workflow","entityType":"deletion-workflow","observations":["Successful YAML-based deletion of DevOpsToolkit AppClaim","AppClaim deletion cascades to App composite and all Kubernetes resources","Order: AppClaim → automatic cascade to Deployment, Service, Ingress","No manual cleanup of individual Kubernetes resources needed","Registry ConfigMaps require separate deletion","Application becomes immediately inaccessible after AppClaim deletion"]}
{"type":"entity","name":"cluster-fingerprint-k8s-1.30.6-aso-westeurope","entityType":"cluster-fingerprint","observations":["Kubernetes version: v1.30.6+k3s1","ASO installed and running with 2 replicas","Istio service mesh: not installed","Azure region target: westeurope","Available user namespaces: 18 including dedicated aso namespace","70+ Azure resource types available via ASO CRDs"]}
{"type":"entity","name":"aso-aks-validation-success","entityType":"validation-guide","observations":["Successfully validated AKS cluster deployment using ASO","ResourceGroup: rg-aso-demo-westeurope in westeurope location","UserAssignedIdentity: aks-demo-identity with proper resource group owner reference","ManagedCluster: aks-demo-cluster with Standard_DS2_v2 nodes, auto-scaling 1-3 nodes","All manifests passed kubectl apply --dry-run=client --validate=true","Used proper API versions: resources.azure.com/v1api20200601, managedidentity.azure.com/v1api20181130, containerservice.azure.com/v1api20210501"]}
{"type":"entity","name":"aso-aks-configuration-pattern","entityType":"configuration-pattern","observations":["AKS cluster configuration with Azure CNI networking","System node pool with auto-scaling enabled","UserAssigned identity for cluster authentication","Resource dependencies: ResourceGroup -> UserAssignedIdentity -> ManagedCluster","Standard Azure tags for resource organization","Kubernetes version: 1.30.6 matching cluster version"]}
{"type":"entity","name":"aso-deployment-plan-aks","entityType":"deployment-plan","observations":["Deployment sequence: 1) ResourceGroup 2) UserAssignedIdentity 3) ManagedCluster","Prerequisites: Azure subscription with contributor access, ASO installed and running","Validation: All manifests validated successfully with kubectl dry-run","Files created: aso-manifests/01-resource-group.yaml, aso-manifests/02-managed-identity.yaml, aso-manifests/03-aks-cluster.yaml","Next steps: Apply manifests with kubectl apply -f aso-manifests/ (REMOVES DRY-RUN)","Estimated deployment time: 10-15 minutes for full AKS cluster provisioning"]}
{"type":"entity","name":"aso-standard-templates-validation","entityType":"validation-guide","observations":["Successfully validated AKS cluster using standard ASO templates","Used standard template variables: azure_region=westeurope, namespace=aso, istio_enabled=false","ResourceGroup template: rg-aso-demo-westeurope with standard labels","UserAssignedIdentity template: aks-demo-identity with proper owner reference","ManagedCluster template: aks-demo-cluster with Standard_DS2_v2 nodes","All templates include istio-enabled: false label","Standard validation workflow completed successfully","All manifests passed kubectl apply --dry-run=client --validate=true"]}
{"type":"entity","name":"aso-template-configuration","entityType":"configuration-pattern","observations":["Standard ASO templates used with variable substitution","Template variables: ${azure_region}, ${namespace}, ${istio_enabled}","Consistent labeling across all resources","Standard resource naming conventions applied","Owner references properly configured for dependencies","API versions verified: resources.azure.com/v1api20200601, managedidentity.azure.com/v1api20181130, containerservice.azure.com/v1api20210501","Templates support both istio-enabled true/false configurations"]}
{"type":"entity","name":"aso-dry-run-deployment-plan","entityType":"deployment-plan","observations":["Standard ASO template deployment validated successfully","Deployment sequence: 1) ResourceGroup 2) UserAssignedIdentity 3) ManagedCluster","Prerequisites: Azure subscription access, ASO operator running","Files generated: aso-manifests-dry-run/01-resource-group.yaml, aso-manifests-dry-run/02-managed-identity.yaml, aso-manifests-dry-run/03-aks-cluster.yaml","Template variables substituted: westeurope region, aso namespace, istio-enabled false","Next steps: kubectl apply -f aso-manifests-dry-run/ (removes dry-run)","Estimated deployment time: 10-15 minutes for AKS provisioning","Standard labels ensure proper resource organization and management"]}
{"type":"entity","name":"aso-production-stack-validation","entityType":"validation-guide","observations":["Successfully validated Production AKS Stack using full-featured template","Template variables: azure_region=westeurope, namespace=aso, istio_enabled=true, k8s_version=1.30.6","ResourceGroup: rg-production-aks-westeurope with istio-enabled=true labels","UserAssignedIdentity: aks-production-identity with proper owner reference","Production AKS Cluster: Full-featured with Istio service mesh, security profiles, workload identity","Istio integration: serviceMeshProfile with mode=Istio, External ingress gateway","Security features: Azure RBAC, workload identity, image cleaner, secure boot, vTPM","Monitoring: Azure Key Vault integration, Azure Policy, KEDA auto-scaling","All manifests passed kubectl apply --dry-run=client --validate=true"]}
{"type":"entity","name":"aso-production-template-config","entityType":"configuration-pattern","observations":["Production AKS Template (Full Featured) used as minimum baseline","Complete stack: ResourceGroup + UserAssignedIdentity + Production AKS","Istio-enabled networking: Azure CNI with Cilium + Istio service mesh","Template variables properly substituted for production deployment","Security baseline: Workload identity, RBAC, encrypted storage, secure boot","Monitoring integration: OIDC issuer, KEDA, Azure Policy, Key Vault","Multi-zone deployment with auto-scaling system pool","Production-ready tags and resource naming conventions"]}
{"type":"entity","name":"aso-production-deployment-plan","entityType":"deployment-plan","observations":["Production AKS Stack validated successfully using full-featured template","Deployment sequence: 1) ResourceGroup 2) UserAssignedIdentity 3) Production AKS Cluster","Prerequisites: Azure subscription with contributor access, admin group object ID, SSH public key","Files generated: aso-production-stack/01-resource-group.yaml, aso-production-stack/02-managed-identity.yaml, aso-production-stack/03-aks-production-cluster.yaml","Template variables: westeurope region, aso namespace, istio-enabled=true, k8s-version=1.30.6","Required updates: Replace SSH public key and admin group object ID placeholders","Next steps: kubectl apply -f aso-production-stack/ (removes dry-run)","Estimated deployment time: 15-20 minutes for production AKS with Istio","Post-deployment: Verify Istio ingress gateway and workload identity configuration"]}